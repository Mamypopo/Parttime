// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// schema.prisma

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id                    Int                @id @default(autoincrement())
  email                 String             @unique
  password              String
  prefix                String // คำนำหน้า
  first_name            String
  last_name             String
  national_id           String             @unique // เลขบัตรประชาชน
  gender                String
  birth_date            DateTime           @db.Timestamptz // วันเกิด
  age                   Int // อายุ (คำนวณจากวันเกิด)
  education_certificate String // วุฒิการศึกษา
  phone_number          String // เบอร์โทร
  line_id               String? // Line ID
  profile_image         String? // รูปโปรไฟล์
  skills                String // ทักษะความสามารถ
  email_verified        Boolean            @default(false)
  verification_token    String? // โทเค็นยืนยันอีเมล
  approved              String             @default("pending")
  role                  String             @default("user") // บทบาท
  created_at            DateTime           @default(now()) @db.Timestamptz
  updated_at            DateTime           @updatedAt @db.Timestamptz
  user_documents        String? // เอกสารของผู้ใช้
  last_active           DateTime?
  is_online             Boolean            @default(false)
  reset_password_token  String? // โทเค็นสำหรับรีเซ็ตรหัสผ่าน
  reset_token_expires   DateTime? // วันหมดอายุของโทเค็น
  workHistories         WorkHistory[] // ความสัมพันธ์กับ WorkHistory ผ่าน JobParticipation
  JobParticipation      JobParticipation[] // ความสัมพันธ์กับงานที่สมัคร
  Log                   Log[]
  notifications         Notification[] // ความสัมพันธ์กับ Notification
  pending_skills        PendingSkill[]
}

model PendingSkill {
  id         Int      @id @default(autoincrement())
  userId     Int
  skill      String
  status     String   @default("pending") // pending, approved, rejected
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("pending_skills") // ชื่อตารางใน database
}

model Job {
  id         Int      @id @default(autoincrement())
  title      String // ชื่องาน
  work_date  DateTime @db.Timestamptz // วันที่ทำงาน
  location   String // สถานที่
  start_time DateTime @db.Timestamptz // เวลาเริ่ม
  end_time   DateTime @db.Timestamptz // เวลาสิ้นสุด
  status     String   @default("published") // เพิ่ม column status

  details          String // รายละเอียดเพิ่มเติม
  created_by       Int // ผู้สร้างงาน (Admin)
  created_at       DateTime           @default(now()) @db.Timestamptz
  updated_at       DateTime           @updatedAt @db.Timestamptz
  creator          Admin              @relation(fields: [created_by], references: [id]) // ความสัมพันธ์กับ Admin
  JobPositions     JobPosition[] // ความสัมพันธ์กับ JobPosition (หลายตำแหน่งในงานเดียว)
  JobParticipation JobParticipation[] // ผู้เข้าร่วมในงานนี้
  Notification     Notification[]

  @@index([work_date, location, title, status])
}

model JobPosition {
  id               Int                @id @default(autoincrement())
  position_name    String // ชื่อตำแหน่งงาน
  wage             Float // ค่าแรงของตำแหน่งนี้
  required_people  Int // จำนวนคนที่ต้องการในตำแหน่งนี้
  details          String // รายละเอียดงานในตำแหน่งนี้
  job_id           Int // เชื่อมกับตาราง Job
  status           String             @default("open") // เพิ่มฟิลด์ status พร้อมค่าดีฟอลต์เป็น 'open'
  job              Job                @relation(fields: [job_id], references: [id], onDelete: Cascade) // ความสัมพันธ์กับ Job
  JobParticipation JobParticipation[] // ผู้เข้าร่วมในตำแหน่งนี้
}

model JobParticipation {
  id              Int              @id @default(autoincrement())
  user_id         Int // ผู้ใช้ที่สมัครเข้าร่วม
  job_position_id Int // ตำแหน่งงานที่สมัคร
  status          String // สถานะของผู้เข้าร่วมงาน (สำเร็จ, ล้มเหลว, อื่นๆ)
  created_at      DateTime         @default(now()) @db.Timestamptz
  updated_at      DateTime         @updatedAt @db.Timestamptz
  workHistories   WorkHistory[] // เพิ่มความสัมพันธ์กับประวัติการทำงาน
  user            User             @relation(fields: [user_id], references: [id]) // ความสัมพันธ์กับผู้ใช้
  jobPosition     JobPosition      @relation(fields: [job_position_id], references: [id]) // ความสัมพันธ์กับตำแหน่งงาน
  Job             Job?             @relation(fields: [jobId], references: [id])
  jobId           Int?
  PaymentHistory  PaymentHistory[]
}

// เพิ่มโมเดลใหม่สำหรับเก็บประวัติการทำงาน
model WorkHistory {
  id                 Int              @id @default(autoincrement())
  jobParticipation   JobParticipation @relation(fields: [jobParticipationId], references: [id])
  jobParticipationId Int              @unique

  // คะแนนแต่ละด้าน
  appearance_score     Int? // คะแนนการแต่งกาย
  quality_score        Int? // คะแนนคุณภาพการตรวจ
  quantity_score       Int? // คะแนนปริมาณ
  manner_score         Int? // คะแนนมารยาท
  punctuality_score    Int? // คะแนนตรงเวลา
  total_score          Int? // คะแนนรวม
  comment              String? // ความคิดเห็น
  is_passed_evaluation Boolean  @default(true)
  created_at           DateTime @default(now()) @db.Timestamptz
  updated_at           DateTime @updatedAt @db.Timestamptz
  User                 User?    @relation(fields: [userId], references: [id])
  userId               Int?

  @@map("work_histories")
}

model Log {
  id          Int      @id @default(autoincrement())
  user_id     Int? // ผู้ใช้ที่ทำการกระทำ
  admin_id    Int? // ผู้ดูแลระบบที่ทำการกระทำ (กรณีที่ไม่มี user)
  action      String // ประเภทการกระทำ
  request_url String // URL ที่ร้องขอ
  method      String // HTTP method
  details     String // รายละเอียดเพิ่มเติม
  timestamp   DateTime @default(now()) @db.Timestamptz // เวลาที่เกิดเหตุการณ์
  ip_address  String // IP ของผู้ใช้
  user_agent  String? // ข้อมูลเบราว์เซอร์
  user        User?    @relation(fields: [user_id], references: [id]) // ความสัมพันธ์กับผู้ใช้
  admin       Admin?   @relation(fields: [admin_id], references: [id]) // ความสัมพันธ์กับผู้ดูแลระบบ
}

model Admin {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  first_name     String // ชื่อ
  last_name      String // นามสกุล
  role           String           @default("admin") // กำหนด role ให้เป็น admin
  created_at     DateTime         @default(now()) @db.Timestamptz
  updated_at     DateTime         @updatedAt @db.Timestamptz
  phone          String? // เพิ่มเบอร์โทร
  profile_pic    String? // เพิ่มรูปโปรไฟล์
  Job            Job[]
  Log            Log[]
  Notification   Notification[]
  PaymentHistory PaymentHistory[]
  PaymentLog     PaymentLog[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now()) @db.Timestamptz
  admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  job       Job?     @relation(fields: [jobId], references: [id])
  jobId     Int?
  read      Boolean  @default(false)
  type      String   @default("notification")
}

//  model ใหม่สำหรับประวัติการจ่ายเงิน
model PaymentHistory {
  id                   Int              @id @default(autoincrement())
  job_participation    JobParticipation @relation(fields: [job_participation_id], references: [id])
  job_participation_id Int
  amount               Decimal          @db.Decimal(10, 2)
  payment_status       String // pending, paid, cancelled
  payment_method       String? // cash, transfer
  payment_slip         String? // path ของสลิป
  payment_note         String?          @db.Text
  paid_at              DateTime?        @db.Timestamptz
  paid_by              Admin?           @relation(fields: [admin_id], references: [id])
  admin_id             Int?
  email_sent           Boolean          @default(false)
  email_sent_at        DateTime?        @db.Timestamptz
  created_at           DateTime         @default(now()) @db.Timestamptz
  updated_at           DateTime         @updatedAt @db.Timestamptz
  payment_logs         PaymentLog[]
}

//  model สำหรับ log การเงิน
model PaymentLog {
  id            Int            @id @default(autoincrement())
  payment       PaymentHistory @relation(fields: [payment_id], references: [id])
  payment_id    Int
  admin         Admin          @relation(fields: [admin_id], references: [id])
  admin_id      Int
  action        String // created, updated, email_sent, cancelled
  action_detail Json? // รายละเอียดการเปลี่ยนแปลง
  ip_address    String?        @db.VarChar(45)
  user_agent    String?        @db.Text
  created_at    DateTime       @default(now())
}
